import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from xgboost import XGBClassifier
import joblib
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
# === 1. Charger les donn√©es ===
df = pd.read_csv("dossiers.csv")  # Remplace par ton fichier CSV

# === 2. Convertir la cible 'Visa (Oui/Non)' en binaire ===
df['Visa'] = df["Visa (Oui/Non)"].map({'Oui': 1, 'Non': 0})
df = df.drop(columns=["Visa (Oui/Non)"])

# === 3. S√©parer les features et la cible ===
X = df.drop("Visa", axis=1)
y = df["Visa"]

# === 4. Encoder les colonnes cat√©gorielles ===
colonnes_cat = ['Typologie du march√©', 'Garantie', 'Situation fiscale', 'Fournisseur blacklist√©']
encoders = {}

for col in colonnes_cat:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    encoders[col] = le

# === 5. Normaliser les colonnes num√©riques ===
colonnes_num = ['Montant du contrat', 'D√©lai de r√©alisation', 'Exp√©rience fournisseur',
                'Nombre de projets similaires', 'Notation interne', "Chiffre d'affaire"]

scaler = StandardScaler()
X[colonnes_num] = scaler.fit_transform(X[colonnes_num])

# === 6. Split en train/test ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === 7. Entra√Æner le mod√®le XGBoost ===
model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model.fit(X_train, y_train)

# === 8. Sauvegarder le mod√®le et les objets de pr√©traitement ===
joblib.dump(model, "modele_xgboost.pkl")
joblib.dump({"encoders": encoders, "scaler": scaler}, "encodeurs_scaler.pkl")

print("‚úÖ Mod√®le XGBoost entra√Æn√© et sauvegard√© avec succ√®s !")

from sklearn.metrics import classification_report

# √âvaluation du mod√®le
y_pred = model.predict(X_test)

# Affichage du rapport de classification avec des noms personnalis√©s
print("üìã Rapport de classification :")
print(classification_report(y_test, y_pred, target_names=["Non", "Oui"]))
